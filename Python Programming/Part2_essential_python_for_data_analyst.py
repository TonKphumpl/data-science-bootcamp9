# -*- coding: utf-8 -*-
"""Essential Python for Data Analyst.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kIiXqWIqbSdMMrfYTqLJH0RRc5R4qUU9

# **Essential Python for DA**
"""

print("hello world")

"""# **OOP**"""

class ATM:
    pass

from random import randint

class ATM:
    def __init__(self, account_name, bank_name, initial):
        self.account_name = account_name,
        self.bank_name = bank_name
        self.balance = initial

    ## string representation
    def __str__(self):
        return f"This is an account of {self.account_name}, bank: {self.bank_name}"

    ## method = function
    def check_balance(self):
        print(f"Balance: {self.balance} THB")

    def deposit(self, money):
        self.balance += money
        print(f"Deposit successfully: your new balance: {self.balance} THB")

    def withdraw(self, money):
        self.balance -= money
        print(f"Withdraw successfully: your new balance: {self.balance} THB")

    def get_OTP(self):
        otp = randint(1000, 9999)
        print(f"Your OTP: {otp} This OTP will be available in the next 2 minutes.")

# create an instance from ATM class
acc1 = ATM("ton", "scb", 500)

# code is for human
print(acc1)

acc1.check_balance()

acc1.deposit(1200)

acc1.withdraw(200)

acc1.get_OTP()

## OK

"""# **Try Except Block**"""

try:
    1/0
except ZeroDivisionError:
    print("cannot divide by zero")
except NameError:
    print("variable not defined")
else:
    print("Done")
finally:
    print("Complete!")

## import csv
import csv

try:
    file = open("friends.csv")
    data = csv.reader(file)
    for row in data:
        print(row)
    file.close()
except FileNotFoundError:
    print("File not found.")

## context manager
result = []

## open and close file automatically
try:
    with open("friends.csv", "r") as file:
        data = csv.reader(file)
        for row in data:
            result.append(row)
except:
    print("file not found")
else:
    print("load data successfully")
finally:
    print(result)

import pandas as pd

try:
    df = pd.read_csv("friends.csv")
except:
    print("a little error.")

# write csv file using pandas
df.to_csv("newCSVFile.csv")

# write csv using csv module
import csv

col_names = ["food_id", "food", "price"]

data = [
    [1, "pizza", 200],
    [2, "french fried", 50],
    [3, "coke", 10]
]

with open("food.csv", "w") as file:
    writer = csv.writer(file)
    writer.writerow(col_names)
    writer.writerows(data)

!cat food.csv

# JSON

## json = dictionary in python

import json

with open("data.json") as file:
    result = json.load(file)

print(result)

result["favorite_food"].append("hamburger")

result["name"] = "John Wick"

result["city"] = "New York"

result

from json import load, dump # dump = write file

## with == Context manager
with open("JohnWick.json", "w") as file:
    json.dump(result, file, indent=6) # เว้น 6 space
    print("successfully dump a new json file.")

!cat JohnWick.json

"""# **API**

Application Programming  Interface

# **Numpy & Pandas**

numerical python

pandas dataframe
"""

import pandas as pd
import numpy as np

nums = [1, 20, 25, 30, 100] # R : vector c( 1, 20, 25, 30, 100)

## numpy array
arr_nums = np.array(nums)

np.sum(arr_nums)

print(
    np.sum(arr_nums),
    np.mean(arr_nums),
    np.median(arr_nums),
    np.min(arr_nums),
    np.max(arr_nums),
    np.std(arr_nums)
)

arr_nums.std()

## vector in R
m1 = np.array([
    [1,2],
    [3,4]
])

# element wise computation
# broadcasting
m1 + 100

np.ones((3,3))

np.zeros((2,2))

np.arange(1, 101, 10) ## R 1:10, 1:100

np.linspace(1, 101, 10)

# metrix dot notation
m1 = np.array([
    [1,2],
    [3,4]
])

m2 = np.array([
    [5,5],
    [3,2]
])

np.dot(m1, m2)

m1.dot(m2)

import pandas as pd

## create dataframe from scratch
data = {
    "id": [1,2,3],
    "name": ["ton", "anna", "jessica"],
    "city": ["BKK", "JPN", "LON"]
}

df = pd.DataFrame(data)

df

# Create new column
df["age"] = [23, 28, 29]
df

# Drop column or row
df.drop("age", axis=1) # 1 is columns

# read csv file from pandas

df = pd.read_csv("store.csv")

df.head(2)

df.columns # attritube

df.shape # attribute

df.info() # method

## query() => filter rows with condition

## clean dataframe column names

col_names = list(df.columns)

# list comprehension
clean_col_names = [ name.lower().replace(" ", "_").replace("-", "_")
                    for name in col_names]

print(clean_col_names)

## assign clean col names to dataframe
df.columns = clean_col_names

df.head()

## data transformation (R dplyr)

# Select columns

df2 = df[["customer_id", "customer_name"]].head(5)

# filter rows
df[ df['customer_name'] == "Claire Gute" ][['order_date', 'customer_id', 'customer_name']]

## query
df.query(" city == 'Los Angeles' and category == 'Furniture' and sub_category == 'Tables' ")[["customer_name", "segment", "city"]]

## aggregate data
## region == "West"

res = df.query("region == 'West'")\
    .groupby(["segment", "region"])[["sales", "profit"]]\
    .agg(['sum', 'mean', 'count'])\
    .reset_index()

print(res)

res.to_csv("agg_data.csv")

"""# **Load data from SQL**"""

import sqlite3
import pandas as pd

## create connecction
con = sqlite3.connect("chinook.db")

custs = pd.read_sql("select * from customers where country='USA'", con)

custs

con.close()

"""# **Sklearn Foundation**

Model: linear regression
"""

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
import pandas as pd

## read csv data from

url = "https://gist.githubusercontent.com/seankross/a412dfbd88b3db70b74b/raw/5f23f993cd87c283ce766e7ac6b329ee7cc2e1d1/mtcars.csv"

mtcars = pd.read_csv(url)

mtcars.head(2)

# ML Workflow
## 4 step: split > train > score > evaluate

y = mtcars["mpg"]
X = mtcars[["hp", "wt", "am"]]

## 1. split data
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.20, random_state=19
)

## 2. train model
model = DecisionTreeRegressor()
model.fit(X_train, y_train) ## model fitting

## 3. score
train_error = model.score(X_train, y_train)

## 4. evaluate
test_error = model.score(X_test, y_test)

print(train_error, test_error)

def rmse(actual, pred):
    error = actual - pred
    return np.sqrt(np.mean((error ** 2)))

actual = np.array([1,2,3])
pred = np.array([1,2,1])

rmse(actual, pred)
